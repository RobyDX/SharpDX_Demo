
cbuffer data :register(b0)
{
	float4x4 world;
	float4x4 viewProj;
	float4 lightDirection;
	float4 viewDirection;
};

struct VS_IN
{
	float4 position : POSITION;
	float3 normal : NORMAL;
	float3 tangent: TANGENT;
	float3 binormal: BINORMAL;
	float2 texcoord : TEXCOORD;
	float3 instancePos:INSTANCEPOSITION;
};

struct PS_IN
{
	float4 position : SV_POSITION;
	float3 normal : NORMAL;
	float2 texcoord : TEXCOORD;
	float3 lightDirection:LIGHT;
	float3 viewDirection:VIEW;
};

//texture
Texture2D textureMap;
Texture2D normalMap;
SamplerState textureSampler;

PS_IN VS( VS_IN input)
{
	PS_IN output = (PS_IN)0;

	float3 B=mul(world,input.binormal);
	float3 T=mul(world,input.tangent);
	float3 N=mul(world,input.normal);

	float4 P=mul(world,input.position)+ float4(input.instancePos,0);
	output.position = mul(viewProj,P);
	output.normal=N;
	output.texcoord=input.texcoord;

	
	
	float3x3 Tangent={T,B,N};
	output.lightDirection=mul(lightDirection.xyz,Tangent);
	output.viewDirection= mul(Tangent,viewDirection.xyz);

	return output;
}

float4 PS( PS_IN input ) : SV_Target
{
	float4 D=textureMap.Sample( textureSampler, input.texcoord);
	float4 N=normalMap.Sample( textureSampler, input.texcoord)*2.0f-1.0f;
	return saturate(dot(N,input.lightDirection))*D+0.2F;
}